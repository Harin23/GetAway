***Notes**** 
-to test the card throwing with two users, in gamedata.js file in routes folder change line 99 from "= turn" to 
"= 0"
-to test the users getInfo function on page load with less than 4 users change line 36 in gamedata.js



****extra possibly useful code*******
----------------------throw card---------
    let roomReq = res.locals.roomInfo.room
    let cardThrown = req.body.card;
    let requestingUserIndex = res.locals.index;
    let assignedDeckName = res.locals.assignedDeckName;
    let name = res.locals.name;
    gamedataModel.findOne({ room: roomReq}, (err, gameRoom) =>{
        if (err){
            console.log(err)
        }else if (gameRoom === null){
            res.status(400).send("Room does not exist")
        }else{
            let turn = gameRoom["turn"];
            function updateArray(someArray, removeIndex){
                let temp = someArray.slice(0,removeIndex);
                temp.push(...someArray.slice(removeIndex+1))
                return temp;
            }
            function getCardValue(card){
                let deckSorted = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"];
                return deckSorted.indexOf(card.slice(0, card.length-1));
            }
            function getCardSuit(card){
                return card.slice(card.length-1)
            }
            function updateCardsOnTable(cardsOnTable){
                if(cardThrown !== "AS" && cardsOnTable.length+1<=4){
                    cardsOnTable.unshift(cardThrown);
                }else if(cardThrown !== "AS" && cardsOnTable.length+1>4){
                    cardsOnTable = [];
                    cardsOnTable.push(cardThrown)
                }
                return cardsOnTable;
            }
            function findTheHighestCardThrower(cardsOnTable, stillPlaying, stillPlayingIndex){
                let index=0, cardValue=0, highCardThrower=0, numberOfCardsOnTable = cardsOnTable.length;
                for(let i=0; i<numberOfCardsOnTable; i++){
                    let card = cardsOnTable[i];
                    let tempIndex = getCardValue(card)
                    //console.log(tempIndex)
                    if(tempIndex >= cardValue){
                        cardValue = tempIndex;
                        index = i;
                    }
                }
                
                //after finding the index of the highest card on the table, based on who threw the current card, turns are reversed to find out who threw the highest card.
                for(let i=0; i<index; i++){
                    if(stillPlayingIndex === 0){
                        stillPlayingIndex = stillPlaying.length-1;
                    }else{
                        stillPlayingIndex -= 1;
                    }
                }
                highCardThrower = stillPlaying[stillPlayingIndex];
                return highCardThrower
            }
            function findTheHighestCardThrowerWithoutCurrentThrower(cardsOnTable, stillPlaying, stillPlayingIndex){
                let index=0, cardValue=0, highCardThrower=0, numberOfCardsOnTable = cardsOnTable.length;
                for(let i=1; i<numberOfCardsOnTable; i++){
                    let card = cardsOnTable[i];
                    let tempIndex = getCardValue(card)
                    //console.log(tempIndex)
                    if(tempIndex >= cardValue){
                        cardValue = tempIndex;
                        index = i;
                    }
                }
                
                //after finding the index of the highest card on the table, based on who threw the current card, turns are reversed to find out who threw the highest card.
                for(let i=0; i<index; i++){
                    if(stillPlayingIndex === 0){
                        stillPlayingIndex = stillPlaying.length-1;
                    }else{
                        stillPlayingIndex -= 1;
                    }
                }
                highCardThrower = stillPlaying[stillPlayingIndex];
                return highCardThrower
            }

            function updateTurn(requestingUserCards, stillPlaying, stillPlayingIndex, cardsOnTable, collectionOccured){
                let gameover = false;
                let tempTurn =0, numberOfCardsOnTable=cardsOnTable.length;
                let cardsLeft = requestingUserCards.length;

                if(collectionOccured === false && numberOfCardsOnTable !== 4){
                    //sequential turn
                    if(stillPlayingIndex === stillPlaying.length-1){
                        tempTurn = stillPlaying[0];
                    }else{
                        tempTurn = stillPlaying[stillPlayingIndex+1];
                    };
                }else if(collectionOccured === false && numberOfCardsOnTable === 4){
                    //highest card thrower as next turn
                    tempTurn = findTheHighestCardThrower(cardsOnTable, stillPlaying, stillPlayingIndex)
                }else{
                    tempTurn = findTheHighestCardThrowerWithoutCurrentThrower(cardsOnTable, stillPlaying, stillPlayingIndex)
                }
                if(cardsLeft === 0){
                    stillPlaying = updateArray(stillPlaying, stillPlayingIndex)
                    gameRoom.stillPlaying = stillPlaying;
                    if(stillPlaying.length === 1){
                        gameover = true;
                    }
                }

                return [tempTurn, gameover]
            }
            //check if it is the turn of the user trying to throw the card, if not send not ur turn message.
            if(requestingUserIndex === turn){
                let cardsOnTable = gameRoom["cardOnTable"];
                let stillPlaying = gameRoom.stillPlaying;
                let stillPlayingIndex = stillPlaying.indexOf(turn);
                let requestingUserCards = gameRoom[assignedDeckName];
                let thrownCardIndex = requestingUserCards.indexOf(cardThrown);
                let suitOnTable = "";
                //confirm that the card user is trying to throw exists in his deck.
                if(thrownCardIndex !== -1){
                    //update the cards on table array with the new card that was just thrown
                    if(cardsOnTable.length === 4 || cardsOnTable.length === 0){
                        suitOnTable = getCardSuit(cardThrown)
                    }else{
                        suitOnTable = getCardSuit(cardsOnTable[0]);
                    }
                    cardsOnTable=updateCardsOnTable(cardsOnTable);
                    //if the thrown cards suit matches the suit of that round or if it is the first card thrown that round, then no one has to collect any cards.
                    if(getCardSuit(cardThrown) === suitOnTable){
                        //check if that was the user's last card, if so, pull them from still playing list. Then update turn based on whos left in the game:
                        console.log("first case")
                        console.log("thrower:", name, " card thrown:", cardThrown, " cards on table before:", cardsOnTable, " suit on table:", suitOnTable)
                        requestingUserCards = updateArray(requestingUserCards, thrownCardIndex)
                        gameRoom[assignedDeckName] = requestingUserCards;
                        let updatedTurn = updateTurn(requestingUserCards, stillPlaying, stillPlayingIndex, cardsOnTable, false)
                            console.log("cards on table after: ", cardsOnTable, "updated turn: ", updatedTurn)
                            if(updateTurn[1] === true){
                                gameRoom.gameover = true;
                            }
                            gameRoom.turn = updatedTurn[0]
                            gameRoom["cardOnTable"] = cardsOnTable;
                            gameRoom.save();
                            res.status(200).send({thrown: true, room: roomReq, gameover: updatedTurn[1]});
                    }else if(requestingUserCards.map(card=> getCardSuit(card)).indexOf(suitOnTable) !== -1){
                        console.log("Wrong card case")
                        res.status(200).send({thrown: false, reason: "Throw the card that matches the suit on table please."})
                    }else{
                        //else if the suit does not match and its not the first card thrown that round, then the person that threw the highest card that round collects.
                        //find the index of the highest card thrown:
                        console.log("collection case")
                        let collectorDeck=[], deckSpaceLeft=0, pickUpAmount=0;
                        console.log("thrower: ", name, "card thrown: ", cardThrown, "cards on table before: ", cardsOnTable, " suit on table:", suitOnTable)
                        requestingUserCards = updateArray(requestingUserCards, thrownCardIndex)
                        gameRoom[assignedDeckName] = requestingUserCards;
                        let updatedTurn = updateTurn(requestingUserCards, stillPlaying, stillPlayingIndex, cardsOnTable, true)
                        console.log("cards on table after: ", cardsOnTable, "updated turn: ", updatedTurn)
                        let collector = updatedTurn[0]
                        //highest card throwers deck is retrieved 
                        collectorDeck = gameRoom["deck"+collector];
                        //since front end was designed hold a max of 13 cards in users deck, the user picks up cards from taht round as long as it doesnt exceed the max deck threshold
                        deckSpaceLeft = 13 - collectorDeck.length;
                        pickUpAmount = Math.min(deckSpaceLeft, cardsOnTable.length)
                        for(let i=pickUpAmount-1; i>=0; i--){
                            collectorDeck.push(cardsOnTable[i])
                        }
                        if(updateTurn[1] === true){
                            gameRoom.gameover = true;
                        }
                        //the collectors get to throw first card that round.
                        gameRoom["turn"] = collector;
                        //clear cards on table after a user collects
                        gameRoom["cardOnTable"] = [];
                        gameRoom.save();
                        res.status(200).send({thrown: true, room: roomReq, gameover: updatedTurn[1]});
                    }
                }else{res.status(200).send({thrown: false, reason: "Card not found"})};
            }else{
                res.status(200).send({thrown: false, reason: "Not your turn"})
            };
        };
    });




















--------------------------------------
 clubs = ["AC", "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "10C", "JC", "QC", "KC"];
  hearts = ["AH", "2H", "3H", "4H", "5H", "6H", "7H", "8H", "9H", "10H", "JH", "QH", "KH"];
  diamonds = ["AD", "2D", "3D", "4D", "5D", "6D", "7D", "8D", "9D", "10D", "JD", "QD", "KD"];
  spades = ["AS", "2S", "3S", "4S", "5S", "6S", "7S", "8S", "9S", "10S", "JS", "QS", "KS"];


---------------
          let username = res["name"]
          if(throwersName !== username){
            this.displayOtherUsers(res["otherUsers"]);
            this.displayDeck(res["assignedDeck"]);
          }else{
            this.displayDeck(res["assignedDeck"]);
          }

----------------
  removeCardFromUsersDeck(x: Array<number>){
    let gcCTX = this.getCanvasContext();
    gcCTX.fillRect(x[0], this.dyUserCards, this.dwUserCards, this.dhUserCards)
  }


-----above constructor----
  screenHeight=0;
  screenWidth=0;

------inside ngoninit--------
    this.screenHeight = window.innerHeight;
    this.screenWidth = window.innerWidth;
------------------------
//0, dwUserCards, dwUserCards*2, dwUserCards*3, dwUserCards*4, dwUserCards*5, dwUserCards*6, dwUserCards*7, dwUserCards*8, dwUserCards*9, dwUserCards*10, dwUserCards*11, dwUserCards*12
---------------------------
// let userCard1 = new Image();
    // userCard1.src = "../../assets/PNG/2C.png";
    // userCard1.onload = () =>{
    //   gcCTX.drawImage(userCard1, dxUserCards[0], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard2 = new Image();
    // userCard2.src = "../../assets/PNG/2C.png";
    // userCard2.onload = () =>{
    //   gcCTX.drawImage(userCard2, dxUserCards[1], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard3 = new Image();
    // userCard3.src = "../../assets/PNG/2C.png";
    // userCard3.onload = () =>{
    //   gcCTX.drawImage(userCard3, dxUserCards[2], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard4 = new Image();
    // userCard4.src = "../../assets/PNG/2C.png";
    // userCard4.onload = () =>{
    //   gcCTX.drawImage(userCard4, dxUserCards[3], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard5 = new Image();
    // userCard5.src = "../../assets/PNG/2C.png";
    // userCard5.onload = () =>{
    //   gcCTX.drawImage(userCard5, dxUserCards[4], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard6 = new Image();
    // userCard6.src = "../../assets/PNG/2C.png";
    // userCard6.onload = () =>{
    //   gcCTX.drawImage(userCard6, dxUserCards[5], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard7 = new Image();
    // userCard7.src = "../../assets/PNG/2C.png";
    // userCard7.onload = () =>{
    //   gcCTX.drawImage(userCard7, dxUserCards[6], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard8 = new Image();
    // userCard8.src = "../../assets/PNG/2C.png";
    // userCard8.onload = () =>{
    //   gcCTX.drawImage(userCard8, dxUserCards[7], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard9 = new Image();
    // userCard9.src = "../../assets/PNG/2C.png";
    // userCard9.onload = () =>{
    //   gcCTX.drawImage(userCard9, dxUserCards[8], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard10 = new Image();
    // userCard10.src = "../../assets/PNG/2C.png";
    // userCard10.onload = () =>{
    //   gcCTX.drawImage(userCard10, dxUserCards[9], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard11 = new Image();
    // userCard11.src = "../../assets/PNG/2C.png";
    // userCard11.onload = () =>{
    //   gcCTX.drawImage(userCard11, dxUserCards[10], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard12 = new Image();
    // userCard12.src = "../../assets/PNG/2C.png";
    // userCard12.onload = () =>{
    //   gcCTX.drawImage(userCard12, dxUserCards[11], dyUserCards, dwUserCards, dhUserCards)
    // };
    // let userCard13 = new Image();
    // userCard13.src = "../../assets/PNG/2C.png";
    // userCard13.onload = () =>{
    //   gcCTX.drawImage(userCard13, dxUserCards[12], dyUserCards, dwUserCards, dhUserCards)
    // };
------------------
      // let cardImage = new Image()
      // cardImage.src = "../../assets/PNG/" + selection.cardSelected + ".png";
      // cardImage.onload = ()=>{
      //   gcCTX.drawImage(cardImage, this.dxCard, this.dyCard, this.dwCard, this.dhCard)
      // }
---------------
  removeIndexedElement(arrayPassed: any[], index: any){
    let temp = []; let array = arrayPassed.slice();
    temp = array.splice(0, index);
    temp.push(...array.splice(1)); 
    return temp;
  }
--
        console.log(this.dxCardsArray, this.dxEndCardsArray)
        this.dxCardsArray=this.removeIndexedElement(this.dxCardsArray, i)
        this.dxEndCardsArray=this.removeIndexedElement(this.dxEndCardsArray, i)
        console.log(this.dxCardsArray, this.dxEndCardsArray)
--
      // let imgData= gcCTX.getImageData(selection.cardSelected[0], this.dyUserCards, this.dwUserCards, this.dhUserCards);
      // gcCTX.putImageData(imgData, this.dxCard, this.dyCard)
--
gcCTX.fillRect(selection.cardSelected[0], this.dyUserCards, this.dwUserCards, this.dhUserCards)
      gcCTX.drawImage(this.cardImages[selection.cardSelected[1]], this.dxCard, this.dyCard, this.dwCard, this.dhCard)
----
    thrown0: [String],
    thrown1: [String],
    thrown2: [String],
    thrown3: [String],
---------------chat html for extra container on left-------
<div class="container recieve-message w-25 float-left">
    <div class="container h-100 bg-secondary mt-2 overflow-auto text" id="displayMessages">
    </div>
</div>
---------------
          let keys = [];
            keys = Object.keys(otherUsers);
                for(let i=0; i<keys.length; i++){
                    let deckName = otherUsers[keys[i]];
                    otherUsers[keys[i]] = gameRoom[deckName].length;
                }
